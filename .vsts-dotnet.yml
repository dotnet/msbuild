variables:
- name: BuildConfiguration
  value: 'Release'
- name: TeamName
  value: MSBuild

resources:
  repositories:
  - repository: MicroBuildTemplate
    type: git
    name: 1ESPipelineTemplates/MicroBuildTemplate
    ref: refs/tags/release

extends:
  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate
  parameters:
    pool:
      name: VSEngSS-MicroBuild2017-1ES
    stages:
    - stage: stage
      jobs:
      - job: buildjob 
        templateContext:
          mb:
            signing:
              enabled: true
              signType: $(SignType)
            sbom:
              enabled: true
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Artifact: logs'
            targetPath: 'artifacts\$(BuildConfiguration)\log'
            artifactName: logs
            condition: succeededOrFailed()
          - output: pipelineArtifact
            displayName: 'Publish Artifact: packages'
            targetPath: 'artifacts\$(BuildConfiguration)\packages'
            artifactName: packages
            condition: succeededOrFailed()
          - output: pipelineArtifact
            displayName: 'Publish Artifact: vsix_pre_sbom'
            targetPath: 'artifacts\$(BuildConfiguration)\VSSetup\Insertion'
            artifactName: vsix_pre_sbom
            condition: succeededOrFailed()
          - output: pipelineArtifact
            displayName: 'Publish Artifact: symbols'
            targetPath: '$(Build.ArtifactStagingDirectory)/symbols'
            artifactName: symbols
            condition: succeededOrFailed()
          # - output: microBuildVstsDrop
          #   displayName: 'Upload VSTS Drop'
          #   dropName: 'Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)/$(Build.BuildId)'
          #   dropFolder: 'artifacts\$(BuildConfiguration)\VSSetup\Insertion'
          #   dropRetentionDays: 90
          #   accessToken: '$(System.AccessToken)'
          #   dropServiceUri: 'https://devdiv.artifacts.visualstudio.com'
          #   vsDropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'
        steps:        
        - task: MicroBuildIBCMergePlugin@1
          displayName: Install IBCMerge Plugin

        - task: CmdLine@1
          displayName: save build number
          inputs:
            filename: echo
            arguments: '##vso[task.setvariable variable=BUILD_BUILDNUMBER_SAVED]%BUILD_BUILDNUMBER%'
          condition: always()

        - task: CmdLine@1
          displayName: Print Vars
          inputs:
            filename: set
          condition: always()

        - task: MSBuild@1
          displayName: 'Get version from Nerdbank.GitVersioning'
          inputs:
            solution: '$(Build.Repository.LocalPath)\build\SetMicrobuildVersion\SetMicrobuildVersion.csproj'
            msbuildArguments: '/restore'
            platform: 'AnyCPU'
            configuration: 'Release'

        - task: CmdLine@1
          displayName: restore build number
          inputs:
            filename: echo
            arguments: '##vso[build.updatebuildnumber]%BUILD_BUILDNUMBER_SAVED%'
          condition: always()

        - task: CmdLine@1
          displayName: Print Vars
          inputs:
            filename: set
          condition: always()
        
        - task: CmdLine@1
          displayName: Run build.cmd
          inputs:
            filename: '$(comspec)'
            arguments: '/c "call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\VsDevCmd.bat" & $(Build.Repository.LocalPath)\build.cmd -pack -sign -configuration Release -properties /p:SignType=$(SignType)"'
        - task: CmdLine@1
          displayName: Print bin contents
          inputs:
            filename: dir
            arguments: '/s /b artifacts\>artifacts\$(BuildConfiguration)\log\BinFileListing.log'
          condition: always()

        - task: CopyFiles@2
          displayName: Collect Symbols
          inputs:
            Contents: 'artifacts\$(BuildConfiguration)\bin\**\*.pdb'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/symbols'
            CleanTargetFolder: true

        - task: MicroBuildSwixPlugin@4
          displayName: Reinstall Swix Plugin (to pick up new build number)
          inputs:
            dropName: 'Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)/$(Build.BuildId)'
          enabled: false

        - task: PublishSymbols@2
          displayName: Index Sources & Publish Symbols to Artifact Services
          inputs:
            SearchPattern: '**/*.pdb'
            SymbolsFolder: '$(Build.ArtifactStagingDirectory)\symbols'
            SymbolServerType: 'TeamServices'

        - task: PowerShell@1
          displayName: Microbuild health checks
          inputs:
            scriptName: 'build/MicrobuildTest.ps1'
          enabled: false
          continueOnError: true

        - task: MicroBuildCleanup@1
          displayName: Execute cleanup tasks

      - job: embedSBOM
        displayName: Embed SBOM
        dependsOn: buildjob
        pool:
          name: VSEngSS-MicroBuild2017-1ES
        steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            artifactName: 'vsix_pre_sbom'
            targetPath: '$(System.ArtifactsDirectory)/vsix'

        - task: PowerShell@2
          displayName: 'Debug - List downloaded files'
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "Files in $(System.ArtifactsDirectory)/vsix:"
              Get-ChildItem -Path "$(System.ArtifactsDirectory)/vsix" -Recurse | Select-Object FullName

        - task: PowerShell@2
          displayName: 'link sbom to Microsoft.Build.vsman in vsix folder'
          inputs:
            targetType: 'inline'
            script: |
              $sbomFile = "$env:SYSTEM_ARTIFACTSDIRECTORY\vsix\Microsoft.Build.neutral_sbom.json"
              # copy the sbom to the vsix folder
              Copy-Item "$env:SYSTEM_ARTIFACTSDIRECTORY\vsix\_manifest\spdx_2.2\manifest.spdx.json" $sbomFile -Force
              # calculate sha256 hash of the sbom file
              $sha256 = Get-FileHash -Path $sbomFile -Algorithm SHA256 | Select-Object -ExpandProperty Hash
              # calculate size of the sbom file
              $size = (Get-Item $sbomFile).length
              # get the crc32 of the sbom file as decimal

              function Get-Crc32 {
                  [CmdletBinding()]
                  param (
                      [Parameter(Mandatory=$true)]
                      [string]$FilePath
                  )
              
                  # Ensure path is resolved properly
                  $resolvedPath = Resolve-Path -Path $FilePath -ErrorAction Stop
                  
                  # Initialize CRC32 table
                  $crc32Table = New-Object 'System.UInt32[]' 256
                  
                  # Generate CRC32 table
                  for ($i = 0; $i -lt 256; $i++) {
                      $c = [uint32]$i
                      for ($j = 0; $j -lt 8; $j++) {
                          if (($c -band 1) -eq 1) {
                              $c = [uint32](0xEDB88320 -bxor ($c -shr 1))
                          } else {
                              $c = [uint32]($c -shr 1)
                          }
                      }
                      $crc32Table[$i] = $c
                  }
              
                  # Initialize CRC32 value - using Convert instead of direct assignment
                  [uint32]$crc32 = [Convert]::ToUInt32("FFFFFFFF", 16)
                  
                  try {
                      # Process file in chunks to avoid memory issues with large files
                      $buffer = New-Object byte[] 8192  # 8KB buffer
                      $stream = [System.IO.File]::OpenRead($resolvedPath)
                      
                      do {
                          $bytesRead = $stream.Read($buffer, 0, $buffer.Length)
                          
                          for ($i = 0; $i -lt $bytesRead; $i++) {
                              $crc32 = [uint32]($crc32Table[($crc32 -bxor $buffer[$i]) -band 0xFF] -bxor ($crc32 -shr 8))
                          }
                      } while ($bytesRead -eq $buffer.Length)
                      
                      $stream.Close()
                  }
                  catch {
                      Write-Error "Error processing file: $_"
                      if ($null -ne $stream) { $stream.Close() }
                      return $null
                  }
              
                  # Final XOR with 0xFFFFFFFF
                  $crc32 = $crc32 -bxor ([Convert]::ToUInt32("FFFFFFFF", 16))
                  
                  return $crc32
              }

              # Calculate CRC32 for your file
              $crc32 = Get-Crc32 -FilePath $sbomFile

              # read the vsman file
              $relativeUrl = "/Microsoft.Build.neutral_sbom.json"
              $vsmanFile = "$env:SYSTEM_ARTIFACTSDIRECTORY\vsix\Microsoft.Build.vsman"
              $vsman = Get-Content -Path $vsmanFile -Raw | ConvertFrom-Json
              
              # add the sbom file to the vsman file - FIXED VARIABLE SYNTAX
              $vsman.packages[0].payloads += @{
                fileName = "Microsoft.Build.neutral_sbom.json"
                sha256 = "$sha256"
                size = $size
                url = "https://vsdrop.corp.microsoft.com/file/v1/Products/$env:SYSTEM_TEAMPROJECT/$env:BUILD_REPOSITORY_NAME/$env:BUILD_SOURCEBRANCHNAME/$env:BUILD_BUILDNUMBER/$env:BUILD_BUILDID;$relativeUrl"
                _buildInfo = @{
                  crc = $crc32
                  relativeUrl = "$relativeUrl"
                }
              }
              # for some reason the vsman does not have the correct url, just fix that...
              Add-Member -InputObject $vsman.packages[0].payloads[0] -MemberType NoteProperty -Name "url" -Value "https://vsdrop.corp.microsoft.com/file/v1/Products/$env:SYSTEM_TEAMPROJECT/$env:BUILD_REPOSITORY_NAME/$env:BUILD_SOURCEBRANCHNAME/$env:BUILD_BUILDNUMBER/$env:BUILD_BUILDID;/Microsoft.Build.vsix" -Force
              # write the vsman file back to disk
              $vsman | ConvertTo-Json -Depth 100 | Set-Content -Path $vsmanFile -Force
        
      
        - task: 1ES.MicroBuildVstsDrop@1
          displayName: 'Upload VSTS Drop'
          inputs:
            dropName: 'Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)/$(Build.BuildId)'
            dropFolder: '$(System.ArtifactsDirectory)/vsix'
            dropRetentionDays: 180
            accessToken: '$(System.AccessToken)'
            dropServiceUri: 'https://devdiv.artifacts.visualstudio.com'
            vsDropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'

        - task: 1ES.PublishBuildArtifacts@1
          displayName: 'Republish vsix artifact with embedded SBOM' 
          inputs:
            PathtoPublish: '$(System.ArtifactsDirectory)/vsix'
            ArtifactName: vsix
