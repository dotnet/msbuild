trigger:
- main
- exp/*
- vs*

jobs:
- job: CheckVersionBumpOnReleaseBranches
  condition: startsWith(variables['System.PullRequest.TargetBranch'], 'vs')
  displayName: "Check Version Bump On Release Branches"
  steps:
  - powershell: |
      $versionsFile = "eng/Versions.props"
      $changedFiles = git diff --name-only HEAD HEAD~1
      $changedVersionsFile = $changedFiles | Where-Object { $_ -eq $versionsFile }
      $isInitialCommit = $false
      $isVersionBumped = $false
      if ($changedVersionsFile -ne $null) {
        $difference = git diff HEAD~1 $versionsFile
        $changedContent = $difference -join "%"
        # 'DotNetFinalVersionKind' is expected to be added only during the initial setup of the release branch
        $initialCommitPattern = '-\s*<VersionPrefix>\d+\.\d+\.\d+<\/VersionPrefix>%.*\+\s*<VersionPrefix>\d+\.\d+\.\d+<\/VersionPrefix><DotNetFinalVersionKind>release<\/DotNetFinalVersionKind>'
        $isInitialCommit = $changedContent -match $initialCommitPattern
        $pattern = '-\s*<VersionPrefix>\d+\.\d+\.(?<previous>\d+)<\/VersionPrefix>.*%\+\s*<VersionPrefix>\d+\.\d+\.(?<current>\d+)<\/VersionPrefix>'
        if (!($isInitialCommit) -and ($changedContent -match $pattern)) {
          try {
            $previousPatch = [Convert]::ToInt32($Matches.previous)
            $currentPatch = [Convert]::ToInt32($Matches.current)
            if ($currentPatch -gt $previousPatch) {
              $isVersionBumped = $true
            }
          } catch {
            Write-Host "An error occurred during conversion: $_"
          }
        }
      }

      if (!($isInitialCommit -or $isVersionBumped)) {
        throw "Hello! I noticed that you're targeting one of our servicing branches. You need to increase the revision version number (the last part) of 'VersionPrefix' in eng/Versions.props."
      }
    condition: startsWith(variables['System.PullRequest.TargetBranch'], 'vs')
    displayName: "Check if patch version is bumped up"

- job: BootstrapMSBuildOnFullFrameworkWindows
  displayName: "Windows Full"
  pool:
    vmImage: 'windows-2022'
  steps:
  - task: BatchScript@1
    displayName: cibuild_bootstrapped_msbuild.cmd
    inputs:
      filename: 'eng/cibuild_bootstrapped_msbuild.cmd'
    env:
      ForceUseXCopyMSBuild: 1
  - task: PublishTestResults@2
    displayName: Publish .NET Framework Test Results
    inputs:
      testRunTitle: 'Windows-on-full Full Framework'
      testRunner: XUnit
      testResultsFiles: 'artifacts/TestResults/Debug/*UnitTests_net472*.xml'
      publishRunAttachments: true
      mergeTestResults: true
    continueOnError: true
    condition: always()
  - task: PublishTestResults@2
    displayName: Publish .NET Test Results
    inputs:
      testRunTitle: 'Windows-on-full .NET'
      testRunner: XUnit
      testResultsFiles: |
        artifacts/TestResults/**/*.xml
        !**/*UnitTests_net472*.xml
      publishRunAttachments: true
      mergeTestResults: true
    continueOnError: true
    condition: always()
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: logs'
    inputs:
      PathtoPublish: 'artifacts/log/Debug'
      ArtifactName: 'FullOnWindows build logs'
    continueOnError: true
    condition: always()
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: TestResults'
    inputs:
      PathtoPublish: 'artifacts/TestResults'
      ArtifactName: 'FullOnWindows test logs'
    continueOnError: true
    condition: always()

- job: BootstrapMSBuildOnCoreWindows
  displayName: "Windows Core"
  pool:
    vmImage: 'windows-2022'
  steps:
  - task: BatchScript@1
    displayName: cibuild_bootstrapped_msbuild.cmd
    inputs:
      filename: 'eng/cibuild_bootstrapped_msbuild.cmd'
      arguments: '-msbuildEngine dotnet'
  - task: PublishTestResults@2
    displayName: Publish .NET Framework Test Results
    inputs:
      testRunTitle: 'Windows-on-Core Full Framework'
      testRunner: XUnit
      testResultsFiles: 'artifacts/TestResults/Debug/*UnitTests_net472*.xml'
      publishRunAttachments: true
      mergeTestResults: true
    continueOnError: true
    condition: always()
  - task: PublishTestResults@2
    displayName: Publish .NET Test Results
    inputs:
      testRunTitle: 'Windows-on-Core .NET'
      testRunner: XUnit
      testResultsFiles: |
        artifacts/TestResults/**/*.xml
        !**/*UnitTests_net472*.xml
      publishRunAttachments: true
      mergeTestResults: true
    continueOnError: true
    condition: always()
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: logs'
    inputs:
      PathtoPublish: 'artifacts/log/Debug'
      ArtifactName: 'CoreOnWindows build logs'
    continueOnError: true
    condition: always()
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: TestResults'
    inputs:
      PathtoPublish: 'artifacts/TestResults'
      ArtifactName: 'CoreOnWindows test logs'
    continueOnError: true
    condition: always()

- job: FullReleaseOnWindows
  displayName: "Windows Full Release (no bootstrap)"
  pool:
    ${{ if eq(variables['System.TeamProject'], 'public') }}:
      name: NetCore-Public
      demands: ImageOverride -equals windows.vs2022preview.amd64.open
    ${{ if ne(variables['System.TeamProject'], 'public') }}:
      name: VSEngSS-MicroBuild2022-1ES
      demands: agent.os -equals Windows_NT
  steps:
  - task: BatchScript@1
    displayName: cibuild.cmd
    inputs:
      filename: 'eng/cibuild.cmd'
      arguments: '-configuration Release -test'
  - task: PublishTestResults@2
    displayName: Publish .NET Framework Test Results
    inputs:
      testRunTitle: 'Windows-on-full Release Full Framework'
      testRunner: XUnit
      testResultsFiles: 'artifacts/TestResults/Release/*UnitTests_net472*.xml'
      publishRunAttachments: true
      mergeTestResults: true
    continueOnError: true
    condition: always()
  - task: PublishTestResults@2
    displayName: Publish .NET Test Results
    inputs:
      testRunTitle: 'Windows-on-full Release .NET'
      testRunner: XUnit
      testResultsFiles: |
        artifacts/TestResults/**/*.xml
        !**/*UnitTests_net472*.xml
      publishRunAttachments: true
      mergeTestResults: true
    continueOnError: true
    condition: always()
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: logs'
    inputs:
      PathtoPublish: 'artifacts/Log/Release'
      ArtifactName: 'FullOnWindows Release build logs'
    continueOnError: true
    condition: always()
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: TestResults'
    inputs:
      PathtoPublish: 'artifacts/TestResults'
      ArtifactName: 'FullOnWindows Release test logs'
    continueOnError: true
    condition: always()

# Unavailable in dnceng-public as of 9/1/2022; should be restored soon.
# - job: RichCodeNavIndex
#   displayName: "Windows Code Indexing"
#   pool:
#     vmImage: 'windows-2022'
#   steps:
#   - task: BatchScript@1
#     displayName: build.cmd
#     inputs:
#       filename: 'build.cmd'
#   - task: RichCodeNavIndexer@0
#     displayName: RichCodeNav Upload
#     inputs:
#       languages: 'csharp'
#     continueOnError: true
#     condition: succeeded()

- job: CoreBootstrappedOnLinux
  displayName: "Linux Core"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - bash: . 'eng/cibuild_bootstrapped_msbuild.sh'
    displayName: CI Build
  - task: PublishTestResults@2
    displayName: Publish .NET Test Results
    inputs:
      testRunTitle: 'Linux .NET'
      testRunner: XUnit
      testResultsFiles: |
        artifacts/TestResults/**/*.xml
        !**/*UnitTests_net472*.xml
      publishRunAttachments: true
      mergeTestResults: true
    continueOnError: true
    condition: always()
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: logs'
    inputs:
      PathtoPublish: 'artifacts/log/Debug'
      ArtifactName: 'CoreOnLinux build logs'
    continueOnError: true
    condition: always()
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: TestResults'
    inputs:
      PathtoPublish: 'artifacts/TestResults'
      ArtifactName: 'CoreOnLinux test logs'
    continueOnError: true
    condition: always()

- job: CoreOnMac
  displayName: "macOS Core"
  pool:
    vmImage: 'macOS-latest'
  steps:
  - bash: . 'eng/cibuild_bootstrapped_msbuild.sh'
    displayName: CI Build
  - task: PublishTestResults@2
    displayName: Publish .NET Test Results
    inputs:
      testRunTitle: 'macOS .NET'
      testRunner: XUnit
      testResultsFiles: |
        artifacts/TestResults/**/*.xml
        !**/*UnitTests_net472*.xml
      publishRunAttachments: true
      mergeTestResults: true
    continueOnError: true
    condition: always()
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: logs'
    inputs:
      PathtoPublish: 'artifacts/log/Debug'
      ArtifactName: 'CoreOnMac build logs'
    continueOnError: true
    condition: always()
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: TestResults'
    inputs:
      PathtoPublish: 'artifacts/TestResults'
      ArtifactName: 'CoreOnMac test logs'
    continueOnError: true
    condition: always()

- template: /eng/common/templates/jobs/source-build.yml
