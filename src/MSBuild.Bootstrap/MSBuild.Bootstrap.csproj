<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
    <CheckEolTargetFramework>false</CheckEolTargetFramework>
    <CheckNotRecommendedTargetFramework>false</CheckNotRecommendedTargetFramework>
    
    <!-- Don't warn on incompatability MSIL vs x86 since this isn't an actual working DLL -->
    <ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>None</ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>

    <!-- We are using two frameworks here, one for Arcade and one for our build. Harcoding this value so when building it copies and
    references files of the right -->
    <FallbackDotNetCliVersion>6.0.135</FallbackDotNetCliVersion>
    <!-- Check if primary file exists, otherwise use fallback -->
  </PropertyGroup>
  <Choose>
    <When Condition="Exists('$(RepoRoot).dotnet\sdk\$(DotNetCliVersion)\Microsoft.NETCoreSdk.BundledVersions.props')">
      <PropertyGroup>
        <UsedDotNetCliVersion>$(DotNetCliVersion)</UsedDotNetCliVersion>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <UsedDotNetCliVersion>$(FallbackDotNetCliVersion)</UsedDotNetCliVersion>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <ItemGroup>
    <ProjectReference Include="..\MSBuild\MSBuild.csproj" />
    
    <!-- Direct project references needed here to avoid NuGet version conflict errors -->
    <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
    <ProjectReference Include="..\Tasks\Microsoft.Build.Tasks.csproj" />
    <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
  </ItemGroup>
  <ItemGroup>
    <!-- This file is needed so the dotnet CLI knows how to map preview SDK versions to tfms (because tfms do not have preview information on them) -->
    <!-- This is because according to semver, 2.1.0-preview is not >= 2.1.0 -->
    <Content Include="$(RepoRoot).dotnet\sdk\$(UsedDotNetCliVersion)\Microsoft.NETCoreSdk.BundledVersions.props" CopyToOutputDirectory="PreserveNewest" />

    <!-- Include NuGet build tasks -->
    <PackageReference Include="NuGet.Build.Tasks" />
    <PackageReference Include="Microsoft.Build.NuGetSdkResolver" />
  </ItemGroup>

  <ItemGroup Condition="'$(MonoBuild)' == 'true'">
    <!-- This is for the second build. Copy over the resolvers from the bootstrap directory, which will include the
         nuget resolver also -->
    <Content
            Condition="'$(CreateBootstrap)' != 'true'"
            Include="$(MSBuildBinPath)\SdkResolvers\**\*" LinkBase="SdkResolvers" CopyToOutputDirectory="PreserveNewest" />

    <Content Include="$(MSBuildExtensionsPath)\**\*" LinkBase="Extensions" CopyToOutputDirectory="PreserveNewest" />

    <Content Include="$(RepoRoot).dotnet\sdk\$(UsedDotNetCliVersion)\RuntimeIdentifierGraph.json" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <ItemGroup Condition="'$(MonoBuild)' != 'true'">
    <!-- Include DependencyModel libraries. -->
    <PackageReference Include="Microsoft.Extensions.DependencyModel" />
  </ItemGroup>

  <!-- Use deps file from this project with additional dependencies listed instead of the one generated in the MSBuild project -->
  <Target Name="UpdateMSBuildDepsFile" AfterTargets="Build" Condition="'$(MonoBuild)' != 'true' and ($([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp2.1')) or '$(TargetFramework)' == 'netstandard2.0')">
    <Copy SourceFiles="$(OutputPath)$(AssemblyName).deps.json" DestinationFiles="$(OutputPath)MSBuild.deps.json" />
  </Target>
  <Target Name="UpdatePublishedMSBuildDepsFile" AfterTargets="Publish" Condition="'$(TargetFramework)' == 'net6.0'">
    <Copy SourceFiles="$(PublishDir)$(AssemblyName).deps.json" DestinationFiles="$(PublishDir)MSBuild.deps.json" />
  </Target>

  <Import Project="..\Package\GetBinPaths.targets" Condition="$(TargetFramework.StartsWith('net4'))"/>

  <Import Project="$(RepoRoot)eng\BootStrapMSBuild.targets" />

</Project>
